* Packages
  Melpa works well for packages.  This will also initalize the
  packages that are installed so we can config them here too.

** Add Melpa

   #+BEGIN_SRC emacs-lisp
     (require 'package)
     (package-initialize)
     (add-to-list 'package-archives
                  '("melpa" . "https://melpa.org/packages/") t)
   #+END_SRC

** Programatic way to make sure packages are installed
   #+BEGIN_SRC emacs-lisp
     (defvar leh-local-packages '(ag auto-complete go-eldoc go-autocomplete go-mode magit markdown-mode))

     (defun uninstalled-packages (packages)
       (delq nil
             (mapcar (lambda (p)
                       (if (package-installed-p p nil) nil p))
                     packages)))

     (let ((need-to-install
            (uninstalled-packages leh-local-packages)))
       (when need-to-install
         (progn
           (package-refresh-contents)
           (dolist (p need-to-install)
             (package-install p)))))
   #+END_SRC
* User Information
** Set Full Name
   #+BEGIN_SRC emacs-lisp
   (setq user-full-name "Lee Hinman")
   #+END_SRC
** Set e-mail address
   #+BEGIN_SRC emacs-lisp
   (setq user-mail-address "hinman@gmail.com")
   #+END_SRC

* Display tweaks
** Turn on column number mode
   #+BEGIN_SRC emacs-lisp
     (setq column-number-mode 't)
   #+END_SRC
** Turn off tool bar
   #+BEGIN_SRC emacs-lisp
   (tool-bar-mode -1)
   #+END_SRC

** Show matching parens
   #+BEGIN_SRC emacs-lisp
     (show-paren-mode 1)
   #+END_SRC
** Fix Yes or no p
  #+BEGIN_SRC emacs-lisp
    (defalias 'yes-or-no-p 'y-or-n-p)  
  #+END_SRC
* Backup Files
  Save All backup files to one directory
  #+BEGIN_SRC emacs-lisp
    (setq backup-directory-alist `((".*" . "~/.emacs.d/backups")))
  #+END_SRC

* Auto-Fill Mode
  I like auto-fill mode for all text-modes
  #+BEGIN_SRC emacs-lisp
    (add-hook 'text-mode-hook 'turn-on-auto-fill)  
  #+END_SRC
* Org Settings
** Enable other exporter backends
   #+BEGIN_SRC emacs-lisp
     (mapc #'(lambda (x)
              (add-to-list 'org-export-backends x))
           '(beamer md odt))
   #+END_SRC
** Enable languages for babel
   #+BEGIN_SRC emacs-lisp
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((ditaa . t)
        (emacs-lisp . t)
        (mscgen . t)
        (perl . t)
        (plantuml . t)
        (python . t)
        (ruby . t)
        (sh . t)))
     (setq org-plantuml-jar-path "/usr/local/Cellar/plantuml/8041/plantuml.8041.jar")
   #+END_SRC
** Hitec latex package
#+BEGIN_SRC emacs-lisp
  (require 'ox-latex)
  (add-to-list 'org-latex-classes
               '("hitec"
               "\\documentclass{hitec}
                 \\usepackage{graphicx}
                 \\usepackage{graphicx}
                 \\usepackage{hyperref}
                 \\usepackage{parskip}
                 \\usepackage{pstricks}
                 \\usepackage{textcomp}
                 \\usepackage[tikz]{bclogo}
                 \\usepackage{listings}
                 \\usepackage{fancyvrb}
                 \\presetkeys{bclogo}{ombre=true,epBord=3,couleur = blue!15!white,couleurBord = red,arrondi = 0.2,logo=\bctrombone}{}
                 \\usetikzlibrary{patterns}
                 \\company{Target Corporation}
                 [NO-DEFAULT-PACKAGES]
                 [NO-PACKAGES]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC
* Markdown settings
  Use GitHub flavored Markdown and turn off auto-fill which causes problems with
  long lines.  Also use pandoc to render to HTML.
  #+BEGIN_SRC emacs-lisp
    (require 'markdown-mode)
    (add-hook 'markdown-mode-hook 'turn-off-auto-fill)
    (add-to-list 'auto-mode-alist '("\\.md\\'" . gfm-mode))
    (setq markdown-command "pandoc --from markdown_github -t html --highlight-style pygments --standalone")
  #+END_SRC
* Helm
  Decided I don't like Helm
  #+BEGIN_EXAMPLE emacs-lisp
    (require 'helm-config)
    (helm-mode 1)
    (define-key global-map [remap find-file] 'helm-find-files)
    (define-key global-map [remap occur] 'helm-occur)
    (define-key global-map [remap list-buffers] 'helm-buffers-list)
  #+END_EXAMPLE

* Exec Path
  Need to new paths to exec so Emacs can find binaries
  #+BEGIN_SRC emacs-lisp
    (mapcar #'(lambda (x)
                (if (file-exists-p x)
                    (add-to-list 'exec-path x)))
            '("/Library/TeX/texbin"
              "/usr/local/bin"
              "/usr/local/sbin"
              "/usr/local/opt/go/libexec/bin"
              "~/src/gopath/bin"
              "~/bin"))
  #+END_SRC
* PATH variable
  Do same thing as exec path
  #+BEGIN_SRC emacs-lisp
    (mapc #'(lambda (x)
              (if (file-exists-p x)
                  (setenv "PATH"
                          (concat x ":" (getenv "PATH")))))
          '("/Library/TeX/texbin"
            "/usr/local/bin"
            "/usr/local/sbin"
            "/usr/local/opt/go/libexec/bin"
            "~/src/gopath/bin"
            "~/bin"))
  #+END_SRC

* Go Mode
  Set GOPATH
  #+BEGIN_SRC emacs-lisp
    (setenv "GOPATH"  (expand-file-name "gopath" "~/src"))
    (require 'go-autocomplete)
    (require 'auto-complete-config)
    (ac-config-default)
    (add-hook 'before-save-hook 'gofmt-before-save)
    (add-hook 'go-mode-hook 'go-eldoc-setup)

  #+END_SRC

* Auth Sources
  #+BEGIN_SRC emacs-lisp
    (setq auth-sources
          (quote
           ("~/.authinfo"
            "~/.authinfo.gpg"
            "~/.netrc"
            macos-keychain-internet)))
  #+END_SRC
