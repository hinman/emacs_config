* Add Melpa
  #+BEGIN_SRC emacs-lisp
    (require 'package)
    (add-to-list 'package-archives
		 '("melpa" . "https://melpa.org/packages/") t)
  #+END_SRC
* Use-Package
  #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
  #+END_SRC
* Full Name
  #+BEGIN_SRC emacs-lisp
    (setq user-full-name "Lee Hinman")
  #+END_SRC
* E-mail
  #+BEGIN_SRC emacs-lisp
    (setq user-mail-address "hinman@gmail.com")
  #+END_SRC
* Disable tool bar
  #+BEGIN_SRC emacs-lisp
    (tool-bar-mode -1)
  #+END_SRC
* Turn on column number mode
  #+BEGIN_SRC emacs-lisp
    (setq column-number-mode 't)
  #+END_SRC
* Show matching parens
  #+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
  #+END_SRC
* Fix yes-or-no-p
  #+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
  #+END_SRC
* Backup Files
  #+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `((".*" . "~/.emacs.d/backups")))
  #+END_SRC
* Auto-Fill Mode
  #+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  #+END_SRC
* Exec Path
  #+BEGIN_SRC emacs-lisp
    (mapcar #'(lambda (x)
		(if (file-exists-p x)
		    (add-to-list 'exec-path x)))
	    '("/usr/local/go/bin"
	      "~/go/bin"))
  #+END_SRC
* Path Variable
  #+BEGIN_SRC emacs-lisp
    (mapc #'(lambda (x)
	      (if (file-exists-p x)
		  (setenv "PATH"
			  (concat x ":" (getenv "PATH")))))
	  '( "/usr/local/go/bin"
	    "~/go/bin"))
  #+END_SRC
* Company Mode
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 1)
    (setq company-minimum-prefix-lenght 3)
    (setq company-dabbrev-downcase nil)
    (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC
* Org Mode
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-c l") 'org-store-link)
    (global-set-key (kbd "C-c c") 'org-capture)
    (use-package org-bullets
		  :ensure t
		  :hook (org-mode . org-bullets-mode))
    (setq org-capture-templates
	  '(("g" "Goals" entry (file+datetree "~/Dropbox/journal/journal.org.gpg")
	     "* Goals\n  - [ ] %?")
	    ("r" "Reflections" entry (file+datetree "~/Dropbox/journal/journal.org.gpg")
	     "* Reflections\n  - %?" :time-prompt t)))
  #+END_SRC
* IDO Mode
  #+BEGIN_SRC emacs-lisp
    (setq ido-enable-flex-matching t)
    (setq ido-everywhere t)
    (ido-mode 1)
  #+END_SRC
* Projectile
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :ensure t
      :config
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
      (projectile-mode +1))
  #+END_SRC
* Magit & Forge
  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t
      :init
      (progn
	(bind-key "C-x g" 'magit-status)))
    (use-package forge
      :ensure t
      :after magit)
  #+END_SRC
* Diff-Hl
  #+BEGIN_SRC emacs-lisp
    (use-package diff-hl
      :ensure t
      :init
      (global-diff-hl-mode))
  #+END_SRC
* Flycheck
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :init
      (global-flycheck-mode))
  #+END_SRC
* Ripgrep
  #+BEGIN_SRC emacs-lisp
    (use-package rg
      :ensure t
      :commands rg)
  #+END_SRC
* Go-mode
  - install goimports
    #+BEGIN_SRC shell
      go get golang.org/x/tools/cmd/goimports
    #+END_SRC
  - install godef
    #+BEGIN_SRC shell
      go get -v github.com/rogpeppe/godef
    #+END_SRC
  - install guru
    #+BEGIN_SRC shell
      go get -v golang.org/x/tools/cmd/guru
    #+END_SRC
  #+BEGIN_SRC emacs-lisp
    (use-package go-mode
      :ensure t
      :config
      (setq gofmt-command "goimports")
      (add-hook 'before-save-hook 'gofmt-before-save))
    (setenv "G111MODULE" "on")
  #+END_SRC
* YAML mode
  #+BEGIN_SRC emacs-lisp
    (use-package yaml-mode
      :ensure t)
  #+END_SRC
* JSON mode
  #+BEGIN_SRC emacs-lisp
    (use-package json-mode
      :ensure t)
  #+END_SRC
* Javascript
  #+BEGIN_SRC emacs-lisp
    (defun my-js-mode-hook ()
      "Custom js-mode behavior"
      (setq indent-tabs-mode nil))
    (add-hook 'js-mode-hook 'my-js-mode-hook)
  #+END_SRC
* Flyspell
  #+BEGIN_SRC emacs-lisp
    (dolist (hook '(text-mode-hook))
      (add-hook hook (lambda () (flyspell-mode 1))))
  #+END_SRC
* Trailing Whitespace
  #+BEGIN_SRC emacs-lisp
    (setq show-trailing-whitespace t)
  #+END_SRC
* Sanityinc Tommorrow Theme
  #+BEGIN_SRC emacs-lisp
    (use-package color-theme-sanityinc-tomorrow
      :ensure t
      :config
      (load-theme 'sanityinc-tomorrow-night t))
  #+END_SRC
* SDCV Mode (Websters 1913 dictionary)
  - download from https://s3.amazonaws.com/jsomers/dictionary.zip
  - insall sdcv from brew or apt
  - put files in =~/.stardict/dic/=
  #+BEGIN_SRC emacs-lisp
    (use-package sdcv
      :ensure t)
  #+END_SRC
* Eglot
  #+BEGIN_SRC emacs-lisp
    (use-package eglot
      :ensure t
      :hook ((go-mode) . 'eglot-ensure))
  #+END_SRC
* Vterm
  #+BEGIN_SRC emacs-lisp
    (use-package vterm
	:ensure t)
  #+END_SRC
* Nov (epub)
#+begin_src emacs-lisp
    (use-package nov
      :ensure t
      :config
      (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))
#+end_src
