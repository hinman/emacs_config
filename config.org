* Add Melpa
  #+BEGIN_SRC emacs-lisp
    (require 'package)
    (add-to-list 'package-archives
		 '("melpa" . "https://melpa.org/packages/") t)
  #+END_SRC
* Use-Package
  #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
  #+END_SRC
* Treesit-auto
#+begin_src emacs-lisp
  (use-package treesit-auto
    :ensure t
    :custom
    (treesit-auto-install 'prompt)
    :config
    (treesit-auto-add-to-auto-mode-alist 'all)
    (global-treesit-auto-mode))
#+end_src
* Full Name
  #+BEGIN_SRC emacs-lisp
    (setq user-full-name "Lee Hinman")
  #+END_SRC
* E-mail
  #+BEGIN_SRC emacs-lisp
    (setq user-mail-address "hinman@gmail.com")
  #+END_SRC
* Set Default Font
#+begin_src emacs-lisp
  ;;(set-face-attribute 'default nil :font "CaskaydiaCove Nerd Font" :height 140)
  (set-face-attribute 'default nil :font "ProggyCrossed" :height 140)
#+end_src
* Disable tool bar
  #+BEGIN_SRC emacs-lisp
    (tool-bar-mode -1)
  #+END_SRC
* Turn on column number mode
  #+BEGIN_SRC emacs-lisp
    (setq column-number-mode 't)
  #+END_SRC
* Show matching parens
  #+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
  #+END_SRC
* Fix yes-or-no-p
  #+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
  #+END_SRC
* Backup Files
  #+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `((".*" . "~/.emacs.d/backups")))
  #+END_SRC
* Darwin set ls for dired
#+begin_src emacs-lisp
  (when (string= system-type "darwin")
    (setq dired-use-ls-dired nil))
#+end_src
* Auto-Fill Mode
  #+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  #+END_SRC
* Exec Path
  #+BEGIN_SRC emacs-lisp
    (mapcar #'(lambda (x)
		(if (file-exists-p x)
		    (add-to-list 'exec-path x)))
	    '("/usr/local/go/bin"
	      "/opt/homebrew/bin"
	      "/opt/homebrew/sbin"
	      "/usr/local/bin"
	      "/Library/TeX/texbin"
	      "~/go/bin"))
  #+END_SRC
* Path Variable
  #+BEGIN_SRC emacs-lisp
    (mapc #'(lambda (x)
	      (if (file-exists-p x)
		  (setenv "PATH"
			  (concat x ":" (getenv "PATH")))))
	  '( "/usr/local/go/bin"
	      "/opt/homebrew/bin"
	      "/opt/homebrew/sbin"
	      "/usr/local/bin"
	      "/Library/TeX/texbin"
	    "~/go/bin"))
  #+END_SRC
* Company Mode
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 10)
    (setq company-minimum-prefix-length 2)
    (setq company-dabbrev-downcase nil)
    (add-hook 'after-init-hook 'global-company-mode)
    (global-set-key (kbd "M-/") #'company-complete))
#+END_SRC
* Org Mode
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-c l") 'org-store-link)
    (global-set-key (kbd "C-c c") 'org-capture)
    (use-package org-bullets
		  :ensure t
		  :hook (org-mode . org-bullets-mode))
    (org-babel-do-load-languages 'org-babel-load-languages
				 '(
				   (emacs-lisp . t)
				   (shell . t)
				   ))
  #+END_SRC
* IDO Mode
  #+BEGIN_SRC emacs-lisp
    (setq ido-enable-flex-matching t)
    (setq ido-everywhere t)
    (ido-mode 1)
  #+END_SRC
* Projectile
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :ensure t
      :config
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
      (projectile-mode +1))
  #+END_SRC
* Magit & Forge
  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t
      :init
      (progn
	(bind-key "C-x g" 'magit-status)))
    (use-package forge
      :ensure t
      :after magit)
  #+END_SRC
* Diff-Hl
  #+BEGIN_SRC emacs-lisp
    (use-package diff-hl
      :ensure t
      :init
      (global-diff-hl-mode))
  #+END_SRC
* Flycheck
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :init
      (global-flycheck-mode))
  #+END_SRC
* Ripgrep
  #+BEGIN_SRC emacs-lisp
    (use-package rg
      :ensure t
      :commands rg)
  #+END_SRC
* Flyspell
  #+BEGIN_SRC emacs-lisp
    (dolist (hook '(text-mode-hook))
      (add-hook hook (lambda () (flyspell-mode 1))))
    (require 'flyspell)
    (add-hook 'prog-mode-hook 'flyspell-prog-mode)
  #+END_SRC
* Trailing Whitespace
  #+BEGIN_SRC emacs-lisp
    (setq show-trailing-whitespace t)
  #+END_SRC
* Sanityinc Tommorrow Theme
  #+BEGIN_SRC emacs-lisp
    (use-package color-theme-sanityinc-tomorrow
      :ensure t
      :config
      (load-theme 'sanityinc-tomorrow-day t))
  #+END_SRC
* SDCV Mode (Websters 1913 dictionary)
  - download from https://s3.amazonaws.com/jsomers/dictionary.zip
  - unzip dictionary.zip
  - extract stardict-dictd-web1913-2.4.2.tar.bz2
  - mv stardict-dictd-web1913-2.4.2 ~/.stardict/dic/
  - insall sdcv from brew or apt
  #+BEGIN_SRC emacs-lisp
    (use-package sdcv
      :ensure t)
  #+END_SRC
* Vterm
  #+BEGIN_SRC emacs-lisp
    (use-package vterm
	:ensure t)
  #+END_SRC
* Nov (epub)
#+begin_src emacs-lisp
    (use-package nov
      :ensure t
      :config
      (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))
#+end_src
* Ledger
  #+begin_src emacs-lisp
    (use-package ledger-mode
      :ensure t)
  #+end_src
* Eglot
#+begin_src emacs-lisp
  (use-package eglot
    :ensure t)
#+end_src
* go-ts-mode
#+begin_src emacs-lisp
  (defun my-eglot-organize-imports () (interactive)
	 (eglot-code-actions nil nil "source.organizeImports" t))
  (add-hook 'go-ts-mode-hook
	    (lambda () (add-hook 'before-save-hook 'my-eglot-organize-imports nil 'local)))
  (add-hook 'go-ts-mode-hook
	    (lambda () (add-hook 'before-save-hook 'eglot-format-buffer)))
  (add-hook 'go-ts-mode-hook 'eglot-ensure)
#+end_src
* Blog
#+begin_src emacs-lisp
  (use-package org-static-blog
    :ensure t
    :config
    (setq org-static-blog-publish-title "Lee E. Hinman's Blog")
    (setq org-static-blog-publish-url "https://hinman.github.io/")
    (setq org-static-blog-publish-directory "~/src/hinman.github.io/")
    (setq org-static-blog-posts-directory "~/src/hinman.github.io/blog/posts/")
    (setq org-static-blog-drafts-directory "~/src/hinman.github.io/drafts/")
    (setq org-static-blog-enable-tags t)
    (setq org-export-with-toc nil)
    (setq org-export-with-section-numbers nil)
    (setq org-static-blog-page-header
	"<meta name=\"author\" content=\"Lee E. Hinman\">
  <meta name=\"referrer\" content=\"no-referrer\">
  <meta name=\"viewport\" content=\"initial-scale=1,width=device-width,minimum-scale=1\">
  <link href= \"static/style.css\" rel=\"stylesheet\" type=\"text/css\" />
  <link rel=\"icon\" href=\"static/favicon.ico\">")
    (setq org-static-blog-page-preamble
	"<div class=\"header\">
    <a href=\"https://hinman.github.io\">Lee E. Hinman's Blog</a>
  </div>")
    (setq org-static-blog-page-postamble
	"<div id=\"archive\">
    <a href=\"https://hinman.github.io/archive.html\">Other posts</a>
  </div>
  <center><a rel=\"license\" href=\"https://creativecommons.org/licenses/by-sa/3.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/3.0/88x31.png\" /></a><br /><span xmlns:dct=\"https://purl.org/dc/terms/\" href=\"https://purl.org/dc/dcmitype/Text\" property=\"dct:title\" rel=\"dct:type\">hinman.github.io</span> by <a xmlns:cc=\"https://creativecommons.org/ns#\" href=\"https://hinman.github.io\" property=\"cc:attributionName\" rel=\"cc:attributionURL\">Lee E. Hinman</a> is licensed under a <a rel=\"license\" href=\"https://creativecommons.org/licenses/by-sa/3.0/\">Creative Commons Attribution-ShareAlike 3.0 Unported License</a>.</center>")
    (setq org-static-blog-index-front-matter
	"<h1>Welcome</h1>\n"))
#+end_src
