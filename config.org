* Add Melpa
  #+BEGIN_SRC emacs-lisp
    (require 'package)
    (package-initialize)
    (add-to-list 'package-archives
		 '("melpa" . "https://melpa.org/packages/") t)
  #+END_SRC
* Use-Package
  #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
  #+END_SRC
* Full Name
  #+BEGIN_SRC emacs-lisp
    (setq user-full-name "Lee Hinman")
  #+END_SRC
* E-mail
  #+BEGIN_SRC emacs-lisp
    (setq user-mail-address "hinman@gmail.com")
  #+END_SRC
* Disable tool bar
  #+BEGIN_SRC emacs-lisp
    (tool-bar-mode -1)
  #+END_SRC
* Turn on column number mode
  #+BEGIN_SRC emacs-lisp
    (setq column-number-mode 't)
  #+END_SRC
* Show matching parens
  #+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
  #+END_SRC
* Fix yes-or-no-p
  #+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
  #+END_SRC
* Backup Files
  #+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `((".*" . "~/.emacs.d/backups")))
  #+END_SRC
* Auto-Fill Mode
  #+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  #+END_SRC
* Exec Path
  #+BEGIN_SRC emacs-lisp
    (mapcar #'(lambda (x)
		(if (file-exists-p x)
		    (add-to-list 'exec-path x)))
	    '("/usr/local/go/bin"
	      "~/go/bin"))
  #+END_SRC
* Path Variable
  #+BEGIN_SRC emacs-lisp
    (mapc #'(lambda (x)
	      (if (file-exists-p x)
		  (setenv "PATH"
			  (concat x ":" (getenv "PATH")))))
	  '( "/usr/local/go/bin"
	    "~/go/bin"))
  #+END_SRC
* Org Mode
  #+BEGIN_SRC emacs-lisp
    (global-set-key "\C-cl" 'org-store-link)
  #+END_SRC
* IDO Mode
  #+BEGIN_SRC emacs-lisp
    (setq ido-enable-flex-matching t)
    (setq ido-everywhere t)
    (ido-mode 1)
  #+END_SRC
* Projectile
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :ensure t
      :config
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
      (projectile-mode +1))
  #+END_SRC
* Magit
  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t
      :init
      (progn
	(bind-key "C-x g" 'magit-status)))
  #+END_SRC
* Git Gutter
  #+BEGIN_SRC emacs-lisp
    (use-package git-gutter
      :ensure t
      :init
      (global-git-gutter-mode +1))
  #+END_SRC
* Flycheck
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :init
      (global-flycheck-mode t))
  #+END_SRC
* Ripgrep
  #+BEGIN_SRC emacs-lisp
    (use-package rg
      :ensure t
      :commands rg)
  #+END_SRC
* Go-mode
  #+BEGIN_SRC emacs-lisp
    (use-package go-mode
      :ensure t
      :config
      (add-hook 'before-save-hook 'gofmt-before-save))

  #+END_SRC
* YAML mode
  #+BEGIN_SRC emacs-lisp
    (use-package yaml-mode
      :ensure t)
  #+END_SRC
* JSON mode
  #+BEGIN_SRC emacs-lisp
    (use-package json-mode
      :ensure t)
  #+END_SRC
* Javascript
  #+BEGIN_SRC emacs-lisp
    (defun my-js-mode-hook ()
      "Custom js-mode behavior"
      (setq indent-tabs-mode nil))
    (add-hook 'js-mode-hook 'my-js-mode-hook)
  #+END_SRC
